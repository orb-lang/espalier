* Vav


  Vav is an unbound collection of PEG rules, which may constitute a proper
Grammar.


** Rationale

  The various operations and rearrangements which I propose to perform on
PEGs is unrelated, in terms of implementation, to the use of that PEG through
binding it to some engine.

This is largely a matter of breaking the existing architecture down into its
constituent parts.


**** imports

#!lua
local core, cluster = use("qor:core", "cluster:cluster")

local pegpeg = require "espalier:peg/pegpeg"
local Metis = require "espalier:peg/metis"
#/lua

The inevitable metacircularity is delayed by using the existing peg/grammar
system for the rules themselves.

#!lua
local VavPeg = require "espalier:peg" (pegpeg, Metis) . parse
#/lua

We're juuuust about to swallow our own tails here.


** Vav

#!lua
local new, Vav, Vav_M = cluster.order()

Vav.pegparse = VavPeg


cluster.construct(new,
   function(_new, vav, peh)
     vav.rules = VavPeg(peh)
     vav.peh = peh
     -- we'll have checks here
     vav.synth = vav.rules :synthesize()

      return vav
   end)
#/lua


#!lua
return new
#/lua

