* Peg Middleware

Extensions of the Peg metatables.

#!lua
local Peg_M = require "espalier:espalier/pegmeta"
#/lua


*** Specializing the Metatables

This needs to be informed by cluster.  ¯\\_(ツ)_/¯.

For now, to get the effect I want, I'm going to make a global.

#!lua
local P_ENV = setmetatable({}, { __index = getfenv(1) })

setfenv(1, P_ENV)
assert(getmetatable) -- sanity check
#/lua

#!lua
local upper = assert(string.upper)

for name, category in pairs(Peg_M) do
  if type(name) == 'string' then
     local up_name = upper(name:sub(1,1)) .. name:sub(2)
     P_ENV[up_name] = category:inherit(category.id)
  end
  -- no action for [1] which we are about to inherit and call Peg
end
-- another sanity check
assert(Rules)
#/lua



To complete the other slice of bread in this sandwich, we need something which
looks like PegM:

#!lua
local PegMiddle = {}

for k, v in pairs(P_ENV) do
   PegMiddle[v.id] = v
end
#/lua

#!lua
return PegMiddle
#/lua


