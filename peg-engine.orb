#!lua
-- Automatically Generated by Espalier
local P, V, S = L.P, L.V, L.S
local R = L.R
local C, Cg, Cb, Cmt = L.C, L.Cg, L.Cb, L.Cmt

local function _peg_fn(_ENV)
   START 'peg'

   SUPPRESS ("peg", "rule_sep", "prag_line", "into", "symbol", "prefix",
            "suffix", "part", "set_capture", "digit", "single_string",
            "double_string", "integer_range", "letter", "escaped", "higit",
            "_", "comment", "dent", "WS", "utf8")

   _ENV["peg"] = V"grammar" + V"pattern"

   _ENV["grammar"] = ( V"rule_sep" * V"rule" )^1 * ( V"_" * -1 + V"Error" )

   _ENV["pattern"] = V"_" * V"rhs" * ( -1 + V"Error" )

   _ENV["rule"] = V"lhs" * V"_" * V"rhs"

   _ENV["rule_sep"] = V"prag_line" + V"_"

   _ENV["prag_line"] = P"\n"^1 * P"#" * V"pragma" * V"rule_sep"

   _ENV["pragma"] = V"verb" * V"body"^-1

   _ENV["verb"] = ( -( S"\t\r\n " ) * 1 )^1

   _ENV["body"] = ( -( P"\n" ) * 1 )^1

   _ENV["lhs"] = ( V"suppressed" + V"rule_name" ) * V"_" * V"into"

   _ENV["rhs"] = V"alt"

   _ENV["suppressed"] = P"`" * V"rule_name" * P"`"

   _ENV["rule_name"] = V"symbol"

   _ENV["into"] = P":=" + P"‚Üê" + P"<-" + P"="

   _ENV["symbol"] = V"letter" * ( V"letter" + V"digit" + S"-_" )^0 + P"_"

   _ENV["alt"] = V"cat" * ( V"_" * P"/" * V"_" * V"cat" )^0

   _ENV["cat"] = V"element" * ( V"_" * V"element" )^0

   _ENV["element"] = V"prefix"^-1 * V"part" * V"suffix"^-1 * V"backref"^-1

   _ENV["prefix"] = ( V"and" + V"not" + V"to_match" ) * V"_"

   _ENV["suffix"] = V"zero_plus" + V"one_plus" + V"optional" + V"repeated"

   _ENV["part"] = V"name" * -( ( V"_" * V"into" ) ) + V"literal" + V"group" +
                  V"set_capture" + V"range" + V"number"

   _ENV["and"] = P"&"

   _ENV["not"] = P"!"

   _ENV["to_match"] = P">>"

   _ENV["zero_plus"] = V"_" * P"*"

   _ENV["one_plus"] = V"_" * P"+"

   _ENV["optional"] = V"_" * P"?"

   _ENV["repeated"] = V"_" * P"%" * V"_" * V"slice"

   _ENV["backref"] = P"@" * V"_" * ( V"reference" + V"back_refer" +
                                   V"eq_refer" + V"gte_refer" + V"gt_refer" +
                                   V"lte_refer" + V"lt_refer" )

   _ENV["name"] = V"name_space" + V"symbol"

   _ENV["name_space"] = V"domain" * V"_" * P"." * V"_" * V"name"

   _ENV["domain"] = V"symbol"

   _ENV["literal"] = V"single_string" + V"double_string"

   _ENV["group"] = P"(" * V"_" * V"alt" * V"_" * P")"

   _ENV["set_capture"] = P"{" * V"set" * P"}"

   _ENV["set"] = ( -( ( P"}" + P"\n" ) ) * V"codepoint" )^0

   _ENV["range"] = P"[" * V"range_start" * P"-" * V"range_end" * P"]"

   _ENV["number"] = V"EOS" + V"integer"

   _ENV["slice"] = V"integer_range" + V"integer"

   _ENV["integer"] = V"digit"^1

   _ENV["digit"] = R"09"

   _ENV["back_refer"] = P"(" * V"reference" * P")"

   _ENV["eq_refer"] = P"(#" * V"reference" * P")"

   _ENV["gte_refer"] = P"(>=" * V"reference" * P")"

   _ENV["gt_refer"] = P"(>" * V"reference" * P")"

   _ENV["lte_refer"] = P"(<=" * V"reference" * P")"

   _ENV["lt_refer"] = P"(<" * V"reference" * P")"

   _ENV["reference"] = V"symbol"

   _ENV["single_string"] = P"'" * ( V"escaped" + -( P"'" ) * V"utf8" )^0 *
                           P"'"

   _ENV["double_string"] = P'"' * ( V"escaped" + -( P'"' ) * V"utf8" )^0 *
                           P'"'

   _ENV["codepoint"] = V"utf8"

   _ENV["range_start"] = V"escaped" + V"codepoint"

   _ENV["range_end"] = V"escaped" + V"codepoint"

   _ENV["integer_range"] = V"integer" * P".." * V"integer"

   _ENV["letter"] = R"AZ" + R"az"

   _ENV["escaped"] = P"\\" * ( ( S"abfnrtv" + P"'" + P'"' + P"\\" ) + V"digit"
                             * V"digit"^-1 * V"digit"^-1 + S"Xx" * V"higit" *
                             V"higit" )

   _ENV["higit"] = V"digit" + R"AF" + R"af"

   _ENV["EOS"] = P"-1"

   _ENV["_"] = ( V"comment" + V"dent" + V"WS" )^0

   _ENV["comment"] = P";" * ( -( P"\n" ) * V"utf8" )^0

   _ENV["dent"] = P"\n" * S" \t"^0

   _ENV["WS"] = S" \t\r"

   _ENV["utf8"] = R"\x00\x7f" + R"\xc2\xdf" * R"\x80\xbf" + R"\xe0\xef" *
                  R"\x80\xbf" * R"\x80\xbf" + R"\xf0\xf4" * R"\x80\xbf" *
                  R"\x80\xbf" * R"\x80\xbf"

   _ENV["Error"] = 1^1

   end

return _peg_fn
#/lua
